using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace skchol
{
    internal class Program
    {
        static void Main(string[] args)
        {
            // √©rt√©k
            bool logikai = true; //c# v√°ltoz√≥t√≠pus
            Boolean logikai2 = true; //.net v√°ltoz√≥t√≠pus
            
            char karakter = 'c';
            Char karakter2 = '\t';
            
            string szoveg = "szia";
            String szoveg2 = "asd";

            sbyte bit8szam = -128; //+127
            SByte bit8szam2 = 127;

            short bit16szam = -32768; 
            Int16 bit16szam2 = 32767;

            int bit32szam = -2147483648;
            Int32 bit32szam2 = 2147483647;

            long bit64szam = -9223372036854775808;
            Int64 bit64szam2 = 9223372036854775807;

            byte ubit8 = byte.MinValue;
            Byte ubit16 = byte.MaxValue;

            /* 
            uint = uint32;
            ushort = uint16;
            ulong = uint64;
            */

            float tort_kicsi = float.MaxValue;
            Single tort_kicsi2 = float.MinValue;

            double tort_nagy = double.MaxValue;
            Double tort_nagy2 = double.MinValue;

            decimal tort_megkotesekkel = decimal.MaxValue;
            Decimal tort_megkotesekkel2 = decimal.MinValue; // 16 bites, 28 + 1 jegy≈± sz√°m

            object ostipus; // minden √©rt√©k √©s refernciat√≠pus ≈ëse, bel≈ële sz√°rmaztathat√≥ minden, ez√©rt helyettes√≠thet is mindent. De ez nem azt jelenti, hogy "int" helyett "object"-et haszn√°lhatsz. Miel≈ëtt b√°rmilyen m≈±veletet v√©gz√ºnk vele , konkretiz√°lni kell az object t√≠pust.
                            // Az "object"-et gyakran keverik a "d√≠namic" t√≠pussal. Ez az√©rt van, mert a dynamic legt√∂bbsz√∂r √∫gy m≈±k√∂dik, mint egy t√≠pus object. Val√≥j√°ban statikus t√≠pus, ami viszont megker√ºli a statikus t√≠pusellene≈ërz√©st.
                            // A j√≥ √©s egyben rossz is a "dynamic" t√≠pusban, hogy egyszerre t√°mogatja az √∂sszes m≈±veletet.      

            // referenia (mutat√≥) t√≠pusok:
            int[] t = new int[8];
            foreach ( int i in t )
            {
                Console.WriteLine(i + ';');
            }
            int[] T; // nincs p√©ld√°ny | ez j√≥, de √≠gy nem haszn√°lhat√≥, p√©ld√°nyos√≠tani kell el≈ëbb. ez csak egy deklar√°ci√≥.
            T = new int[]{3,4,5,6,7};
            int[] z = { 0, 1, 23, 34 };
        }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using heloka;
using heloka.heloszia;

namespace ip11_elso
{
    internal class Program
    {
        static void Main(string[] args)
        {
            // nah
            int szam1, szam2, oszto; // k√©t sz√°m v√°ltoz√≥ deklar√°l√°sa, eg√©sz t√≠pus
            szam1 = Convert.ToInt32(Console.ReadLine());
            szam2 = Convert.ToInt32(Console.ReadLine());
            int k_oszto = szam1 < szam2 ? szam2 : szam1 /2;
            for (oszto = k_oszto; oszto >= 1; oszto--)
            {
                if (szam1 % oszto == 0 && szam2 % oszto == 0)
                {
                    break;
                }
                if (szam1 == szam2)
                {
                    Console.WriteLine(szam1);
                }
                else if (oszto == 0)
                {
                    Console.WriteLine("Relat√≠v pr√≠mek");
                }
                else
                {
                    Console.WriteLine(oszto);
                }
                Console.ReadKey();
            }
        }
    }
    namespace szia
    {
        struct helo
        {
            class osztaly
            {
                struct sz
                {
                    private int valtozo;
                    public sz(int szam)
                    {
                        valtozo = szam;
                    }
                }
            }
        }
    }
}
namespace heloka
{
    namespace heloszia
    {

    }
}

using System;
using System.Collections.Generic;
using System.Data.Odbc;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _11ip_valtozok
{
	internal class Program
	{
		static void Main(string[] args)
		{
			/* Sz√°m: eg√©sz √©s t√∂rt, el≈ëjeles eg√©sz √©s el≈ëjel n√©lk√ºli, ilyenkor a foszt√≥k√©pz≈ë az "U"
			 * K√©t elnevez√©s az egyik a keretrendszer√© (dotNET = .NET) m√°sik a C#-√©. Mindkett≈ë nyugodtan haszn√°lhat√≥ */
			int a = 1;
			a *= 2;
            Console.WriteLine(a + " " + a.GetType());
			Int32 b = 2;
            Console.WriteLine(b + " " + b.GetType());			
			ulong c = ulong.MaxValue;
			Console.WriteLine(c + " " + c.GetType());
			string szoveg = "k";
			char karakter = Convert.ToChar(szoveg);
            Console.WriteLine(karakter);
			bool logikai;
			Console.WriteLine();

			Console.ReadKey();
		}
	}
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.AccessControl;
using System.Text;
using System.Threading.Tasks;

namespace osszetett
{
	internal class Program
	{
		static void Main(string[] args)
		{
			#region deklar√°l√°s ut√°n p√©ld√°nyos√≠t√°s
			int[] tomb; /* ez csak deklar√°ci√≥, ilyenkor ez a t√∂mb m√°r l√©tezik de mivel nincs p√©ld√°nyos√≠tva, nem haszn√°lhat√≥ */
			tomb = new int[10]; /* √≠gy m√°r van egy 10 elem≈±, kiz√°r√≥lag 32 bites eg√©sz sz≈±mok t√°rol√°s√°ra alkalmas t√∂mb */
			int index = 0;
			while (index < tomb.Length)
			{
				Console.WriteLine(tomb[index]);
				index++;
			}
			#endregion
			#region deklar√°l√°s √©s p√©ld√°nyos√≠t√°s
			double[] tortek = new double[10];
			int indx = 0;
			do
			{
				Console.WriteLine(tortek[indx]);
				indx++;

			}while (indx < tortek.Length);
			#endregion
			#region elemekkel p√©ld√°nyos√≠t√°s
			// elemekkel p√©ld√°nyos√≠t√°s
			string[] duma = { "a", "b", "c", "d", "e", "f" };
			foreach (var item in duma)
			{
                Console.WriteLine(item);
			}
			#endregion
			//list√°k
			List<bool> LogLista = new List<bool>();
			LogLista.Add(true); LogLista.Add(false);
			for (int i = 0; i < LogLista.Count; i++) // list√°n√°l count, t√∂mbn√©l length
			{
				Console.WriteLine(LogLista[i]);
			}
			Console.ReadKey();
		}
	}
}

n√©vt√©r - oszt√°ly v. strukt√∫ra
oszt√°ly v. str. - mez≈ë
		- met√≥dus
			- kontstruktor
			- destruktor
			- esem√©nykezel≈ë
		- tulajdons√°g
		- deleg√°lt
Egy n√©vt√©rben lehet m√°sik n√©vt√©r, vagy oszt√°ly, vagy strukt√∫ra
Egy oszt√°lyban lehet m√°sik oszt√°ly, vavgy strukt√∫ra, meg a t√∂bbi, amit fel√≠rtunk.
Egy strukt√∫r√°ban mniden lehet, ami egy oszt√°lyban kiv√©ve destruktor.

USING direct√≠va n√©vterekt vesz haszn√°latba, pl.:
using mysql.data.myqslclient;
fontos! csak az utols√≥ n√©vteret l√°tja!! Teh√°t ha a Data n√©vt√©r is kell akkor:
using mysql.data;

A using direct√≠v√°t nem k√∂telez≈ë haszn√°lni! (csak k√©nyelmes) ha egy msql parancsv√°ltoz√≥t akarok l√©trehozni, akkor az el≈ëz≈ë using be√°ll√≠t√°s eset√©n √≠gy n√©z ki:
MySqlCommand parancs = new MySqlCommand(...);
ha nincs haszn√°latba v√©ve (nincs usingolva) akkor;
MySql.Data.MySqlCommand parancs = new MySql.Data.MySqlCommand(...);

N√©vt√©r: Mindent tartalmazhat. Gy≈±jt≈ëegys√©g, mint Python-ban az import√°lt modulok

Oszt√°ly - Class: eredetileg csak adatszerkezet le√≠r√°s√°ra haszn√°lt√°k, gyakorlatilag a k√∂vetkez≈ë t√∂rt√©nt: az ≈ës programnyelvek n√©melyike ismerte a rekord szerkezetet. A rekordban azonos n√©v alatt, k√ºl√∂nb√∂z≈ë T√≠pus√∫ v√°ltoz√≥kat tartottak. pl: 'tarolo'- ez volt a rekord neve, azon bel√ºl: tarolo.cim - ez egy v√°ltoz√≥ volt.

A strukt√∫ra v√°ltotta ki az √∂sszetettebb rekordokat. A strukt√∫r√°nak az OOP nyelvekben mindene van, ami egy oszt√°lynak is (kivet√©l destruktor, az nem minden esetben van). Van egy nagyy hib√°ja, hogy a rekord t√≠pust√≥l √°t√∂r√∂k√∂lte azt, hogy a strukt√∫ra mindegy egyede √ârt√©k t√≠p√∫s√∫.

Amikor a strukt√∫r√°k t√∫l nagyra n≈ëttek (felzab√°lt√°k a RAM-ot) akkor hozt√°k l√©tre az oszt√°lyt, ami mindent tud, amit a strukt√∫ra, csakhogy referencia t√≠pus√∫, teh√°t k√∂nnyed√©n kipucolhat√≥ a RAM-b√≥l.

Oszt√°lyban n√©vt√©r nem lehet, minden m√°s igen!
Mez≈ë - glob√°lis, az oszt√°lyon bel√ºl t√∂bbnyire mindenhol l√°that√≥ v√°ltoz√≥, ami lehet √©rt√©k, vagy referencia t√≠pus√∫.
Tulajdons√°g - nem param√©terezhet≈ë, de input-outputra alkalmas r√©sz. Mivel j√≥l rejthet≈ë, ez√©rt az adatok kifele k√∂zl√©s√©n√©l els≈ësorban ezt haszn√°ljuk

MET√ìDUSOK:
Konstruktorok - ugyanaz a szerepe, mint Python-ban:
l√©trehozza az oszt√°lyp√©ld√°nyt. param√©terezhet≈ë, a param√©tereit √°ltal√°ban mez≈ëkben t√°roljuk.
F√ºggv√©nyek - olyan met√≥dusok, melyeknek van visszat√©r√©si √©rt√©ke
void-os f√ºggv√©nyek (elj√°r√°sok) - olyan met√∫dusok, melyeknek nincs visszat√©r√©si √©rt√©ke.
esem√©nykezel≈ëk - olyan met√∫dusok, melyeknek a ut√°s√°t valamilyen interakci√≥ v√°ltja ki. vannak k√∂telez≈ë param√©tereik: 
	1. ki (mi) h√≠vta meg az esem√©nykezel≈ët, a h√≠v√≥nak milyen tulajdons√°gai vannak.
	
deleg√°ltak - olyan met√≥dusok, melyeknek param√©terei is met√≥dusok.
destruktor - az a met√≥dus, mely t√∂rli a RAM-b√≥l az oszt√°lyp√©ld√°nyt. A c#-nak van be√©p√≠tett destruktora - garbage collector -, ez√©rt az esetek 99%-√°ban nem kell destruktort √≠rnunk! ü§´üßè‚Äç‚ôÇÔ∏è

